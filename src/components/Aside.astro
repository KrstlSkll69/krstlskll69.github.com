---
import { Information, MiscIcons, Platforms, Socials } from '@/consts'
import Avatar from '@/components/Avatar.astro'
import Box from '@/components/Box.astro'
import { fetchUserData } from '@/utils/fetchData'

const user = await fetchUserData();
---

<aside class="flex w-full flex-col items-center gap-4 md:max-w-[240px]">
    <Avatar size={240} />

    <Box>
        <div class="flex items-center gap-2">
            <span class="text-sm font-medium text-neutral-400">Badges</span>

            {user.clanName && user.clanBadge && (
                <div class="flex items-center gap-1 bg-zinc-800 px-2 py-1 rounded-md">
                    <img src={user.clanBadge} alt="Clan Badge" class="w-3 h-3" />
                    <span class="text-xs text-neutral-200">{user.clanName}</span>
                </div>
            )}
        </div>

        <div class="flex flex-wrap gap-2 mt-1">
            {user.badges.map((badge) => (
                <img
                    src={badge.icon}
                    alt={badge.tooltip}
                    title={badge.tooltip}
                    class="size-4 rounded"
                />
            ))}
        </div>
    </Box>

    <Box>
        <div class="flex items-center gap-2">
            <span class="text-sm font-medium text-neutral-400"> About </span>

                {user.active_on_discord_web && <Platforms.Web fill="white" class="size-4" /> }
                {user.active_on_discord_mobile && <Platforms.Mobile fill="white" class="size-4" /> }
                {user.active_on_discord_desktop && <Platforms.Desktop fill="white" class="size-4" /> }
                {user.active_on_discord_embedded && <Platforms.Embedded fill="white" class="size-4" /> }
        </div>

        <span class="flex items-center gap-1 font-medium text-neutral-200">
            <MiscIcons.AlarmClock size="18" fill="white" />
            <span id="user-timezone-text">--:--</span>
        </span>

        <span class="flex items-center gap-1 font-medium text-neutral-200">
            <MiscIcons.User size="18"fill="white" />
            {user.pronouns}
        </span>

        {user.customStatus && (
            <span class="flex items-center gap-1 font-medium text-neutral-200">
                <MiscIcons.BookOpen size="18" fill="white" />
                {user.customStatus}
            </span>
        )}

        {user.activity && (
            <span class="flex items-center gap-1 font-medium text-neutral-200">
                <MiscIcons.ListMusic size="18" fill="white" />
                {user.activity}
            </span>
        )}
        
        {
            Information.map((info) => (
                <span class="flex items-center gap-1 font-medium text-neutral-200">
                    <info.icon size="18" fill="white" />
                    {info.text}
                </span>
            ))
        }
    </Box>

    <Box>
        <span class="text-sm font-medium text-neutral-400"> Socials </span>
        {
            Socials.map((social) => (
                <a
                    href={social.url}
                    target="_blank"
                    class="flex items-center gap-1 font-medium text-neutral-200 transition-colors hover:text-sky-500"
                >
                    <social.icon size="18" width="18" height="18" fill="white" />
                    {social.text}
                </a>
            ))
        }
    </Box>
</aside>

<script type="module">
  async function fetchTimezone() {
    const timezoneRes = await fetch(`https://timezone.creations.works/get?id=929208515883569182`);
    if (timezoneRes.ok) {
      const timezoneData = await timezoneRes.json();
      return timezoneData.timezone || timezone;
    }
    return timezone;
  }

  function initTimezoneClock(timezone, elementId) {
    const el = document.getElementById(elementId);
    if (!el) return;

    const formatter = new Intl.DateTimeFormat("en-US", {
      timeZone: timezone,
      hour: "2-digit",
      minute: "2-digit",
      hour12: true,
    });

    function updateTime() {
      el.textContent = formatter.format(new Date());
    }

    updateTime();
    return setInterval(updateTime, 60000);
  }

  (async () => {
    const tz = await fetchTimezone();
    initTimezoneClock(tz, "user-timezone-text");
  })();
</script>
